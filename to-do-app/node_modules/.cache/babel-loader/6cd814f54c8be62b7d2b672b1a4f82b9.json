{"ast":null,"code":"var _jsxFileName = \"/Users/chrysalis/Documents/Code_Directory/to-do-app/to-do-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport Todo from \"../src/Todo\";\nimport TodoForm from \"./ToDoForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  //? The first parameter, todos, is what you are going to name your state.\n  //?The second parameter, setTodos, is what you are going to use to set the state.\n  const [list, setList] = useState([{\n    text: \"Learn about React\",\n    isCompleted: false\n  }, {\n    text: \"Meet Friend\",\n    isCompleted: false\n  }, {\n    text: \"Complete navbar for Project\",\n    isCompleted: false\n  }]);\n\n  const addTodo = text => {\n    const newTodos = [...list, {\n      text\n    }];\n    setList(newTodos);\n  };\n\n  const completeTask = index => {\n    const newTodos = [...list];\n    newTodos[index].isCompleted = true;\n    setList(newTodos);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"To Do List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo-list\",\n      children: [list.map((todo, index) => /*#__PURE__*/_jsxDEV(Todo, {\n        index: index,\n        todo: todo,\n        completeTodo: completeTodo\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(TodoForm, {\n        addTodo: addTodo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"W192xR1O2B7Ke7vsJlzpVee/dtc=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/chrysalis/Documents/Code_Directory/to-do-app/to-do-app/src/App.js"],"names":["React","useState","Todo","TodoForm","App","list","setList","text","isCompleted","addTodo","newTodos","completeTask","index","map","todo","completeTodo"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B;AACA;AAEA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,CAC/B;AAAEM,IAAAA,IAAI,EAAE,mBAAR;AAA6BC,IAAAA,WAAW,EAAE;AAA1C,GAD+B,EAE/B;AAAED,IAAAA,IAAI,EAAE,aAAR;AAAuBC,IAAAA,WAAW,EAAE;AAApC,GAF+B,EAG/B;AAAED,IAAAA,IAAI,EAAE,6BAAR;AAAuCC,IAAAA,WAAW,EAAE;AAApD,GAH+B,CAAD,CAAhC;;AAMA,QAAMC,OAAO,GAAIF,IAAD,IAAU;AACxB,UAAMG,QAAQ,GAAG,CAAC,GAAGL,IAAJ,EAAU;AAAEE,MAAAA;AAAF,KAAV,CAAjB;AACAD,IAAAA,OAAO,CAACI,QAAD,CAAP;AACD,GAHD;;AAKA,QAAMC,YAAY,GAAGC,KAAK,IAAI;AAC5B,UAAMF,QAAQ,GAAG,CAAC,GAAGL,IAAJ,CAAjB;AACAK,IAAAA,QAAQ,CAACE,KAAD,CAAR,CAAgBJ,WAAhB,GAA8B,IAA9B;AACAF,IAAAA,OAAO,CAACI,QAAD,CAAP;AACD,GAJD;;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,iBACGL,IAAI,CAACQ,GAAL,CAAS,CAACC,IAAD,EAAOF,KAAP,kBACR,QAAC,IAAD;AAAkB,QAAA,KAAK,EAAEA,KAAzB;AAAgC,QAAA,IAAI,EAAEE,IAAtC;AAA4C,QAAA,YAAY,EAAEC;AAA1D,SAAWH,KAAX;AAAA;AAAA;AAAA;AAAA,cADD,CADH,eAIE,QAAC,QAAD;AAAU,QAAA,OAAO,EAAEH;AAAnB;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GAhCuBL,G;;KAAAA,G","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Todo from \"../src/Todo\";\nimport TodoForm from \"./ToDoForm\";\n\nexport default function App() {\n  //? The first parameter, todos, is what you are going to name your state.\n  //?The second parameter, setTodos, is what you are going to use to set the state.\n\n  const [list, setList] = useState([\n    { text: \"Learn about React\", isCompleted: false },\n    { text: \"Meet Friend\", isCompleted: false },\n    { text: \"Complete navbar for Project\", isCompleted: false },\n  ]);\n\n  const addTodo = (text) => {\n    const newTodos = [...list, { text }];\n    setList(newTodos);\n  };\n  \n  const completeTask = index => {\n    const newTodos = [...list]\n    newTodos[index].isCompleted = true\n    setList(newTodos)\n  }\n\n  return (\n    <div className=\"app\">\n      <h1>To Do List</h1>\n      <div className=\"todo-list\">\n        {list.map((todo, index) => (\n          <Todo key={index} index={index} todo={todo} completeTodo={completeTodo}/>\n        ))}\n        <TodoForm addTodo={addTodo} />\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}